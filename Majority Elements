#include <bits/stdc++.h>
using namespace std;

vector<int> MajorityElements(vector<int> v){
    int Ele1=v[0];
    int count1=1;
    int Ele2=0;
    int count2=0;

    for(int i=1;i<v.size();i++){
        if(v[i]==Ele1) count1++;
        else if(v[i]==Ele2) count2++;
        else if(count1==0){ Ele1=v[i]; count1=1;}
        else if(count2==0){ Ele2=v[i]; count2=1;}
        else{ count1--; count2--;}
    }
    count1=count2=0;
    for(int i=0;i<v.size();i++){
        if(v[i]==Ele1) count1++;
        if(v[i]==Ele2) count2++;
    }
    vector<int> ans;
    if(count1>v.size()/3) ans.push_back(Ele1);
    if(count2>v.size()/3) ans.push_back(Ele2);

    return ans;
}

int main() {
    int n;
    cin>>n;
    vector<int> v;
    int x;
    for(int i=0;i<n;i++){
        cin>>x;
        v.push_back(x);
    } 
    vector<int> ans;
    ans=MajorityElements(v);
    if(ans.size()==0) cout<<"No Majority Elements";
    else{
        for(int i=0;i<ans.size();i++) cout<<ans[i]<<" ";
    }

}

/*
You have to given an array A of size N.
Find all the elements which appear more than floor(N/3) times in the given array.
There is a condition that you have to do your job in O(N) time complexity and O(1) space complexity.

Input Format
First line contains N ->No. of elements in the array
Second line has N integers denoting the elements of the array A ie A1,A2,A3…….AN.

Constraints
1<=N<=10^7
0<=Ai<=10^9

Output Format
Print a single line containing all the majority elements occurring more than floor(N/3) times.
If there is no majority element then just print "No Majority Elements".

Sample Input
8
2 2 3 1 3 2 1 1 
Sample Output
1 2
*/
